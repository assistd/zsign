diff --git a/CMakeLists.txt b/CMakeLists.txt
index acf8e35..c2a5423 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,15 @@ cmake_minimum_required(VERSION 3.14)
 project(zsign)
 set(CMAKE_CXX_STANDARD 11)
 
+#https://stackoverflow.com/questions/51121295/cmake-find-module-to-distinguish-shared-or-static-library
+
+if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
+set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".so")
+endif()
+
+#https://stackoverflow.com/questions/58347250/how-to-find-static-version-of-zlib-in-cmake
+#set(ZLIB_USE_STATIC_LIBS "ON")
+
 # Dependencies
 # On macOS, search Homebrew for keg-only versions of OpenSSL because system provided /usr/lib/libssl.dylib cannot be linked
 if (CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin")
@@ -19,6 +28,7 @@ if (CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin")
         set(OPENSSL_LIBRARIES "${BREW_OPENSSL_PREFIX}/lib/libssl.dylib;${BREW_OPENSSL_PREFIX}/lib/libcrypto.dylib")
     endif()
 else()
+    set(OPENSSL_USE_STATIC_LIBS TRUE)
     find_package(OpenSSL REQUIRED)
 endif()
 
@@ -36,8 +46,19 @@ list(APPEND LIB_LIST ${ZLIB_LIBRARIES})
 
 # Main sources
 
-file(GLOB SRC common/*.cpp ./**.cpp)
+file(GLOB SRC common/*.cpp ./**.cpp libzip.c)
 
 add_executable(zsign ${SRC})
-target_link_libraries(zsign ${LIB_LIST})
 
+if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
+target_link_options(zsign PRIVATE -static-libgcc -static-libstdc++)
+endif()
+
+#target_link_libraries(zsign ${LIB_LIST})
+#find_package(ZLIB REQUIRED)
+#target_link_libraries(zsign PRIVATE ZLIB::ZLIB)
+
+target_link_libraries(zsign PRIVATE minizip)
+target_link_libraries(zsign PRIVATE OpenSSL::Crypto)
+find_package(Threads REQUIRED)
+target_link_libraries(zsign PRIVATE Threads::Threads)
diff --git a/common/common.cpp b/common/common.cpp
index b25dadc..d6533fd 100644
--- a/common/common.cpp
+++ b/common/common.cpp
@@ -295,11 +295,9 @@ string GetCanonicalizePath(const char *szPath)
 
 #if defined(WINDOWS)
 
-			if (NULL != _fullpath((char *)"./", path, PATH_BUFFER_LENGTH))
+			if (NULL != _fullpath(path, szPath, PATH_BUFFER_LENGTH))
 			{
 				strPath = path;
-				strPath += "/";
-				strPath += szPath;
 			}
 #else
 			if (NULL != realpath("./", path))
diff --git a/common/common.h b/common/common.h
index 0e1592b..9aeb052 100644
--- a/common/common.h
+++ b/common/common.h
@@ -4,7 +4,11 @@
 #include <stdio.h>
 #include <stdint.h>
 #include <stdarg.h>
+#if defined(WINDOWS)
+#include <mman.h>
+#else
 #include <sys/mman.h>
+#endif
 #include <errno.h>
 #include <unistd.h>
 #include <fcntl.h>
@@ -157,4 +161,4 @@ public:
 
 private:
     static int g_nLogLevel;
-};
\ No newline at end of file
+};
diff --git a/libzip.c b/libzip.c
new file mode 100644
index 0000000..cdd7420
--- /dev/null
+++ b/libzip.c
@@ -0,0 +1,224 @@
+#include "mz.h"
+#include "mz_os.h"
+#include "mz_strm.h"
+#include "mz_strm_buf.h"
+#include "mz_strm_split.h"
+#include "mz_zip.h"
+#include "mz_zip_rw.h"
+
+#include <stdio.h>  /* printf */
+
+typedef struct minizip_opt_s {
+    uint8_t     include_path;
+    int16_t     compress_level;
+    uint8_t     compress_method;
+    uint8_t     overwrite;
+    uint8_t     append;
+    int64_t     disk_size;
+    uint8_t     follow_links;
+    uint8_t     store_links;
+    uint8_t     zip_cd;
+    int32_t     encoding;
+    uint8_t     verbose;
+    uint8_t     aes;
+    const char *cert_path;
+    const char *cert_pwd;
+} minizip_opt;
+
+/***************************************************************************/
+int32_t minizip_extract_entry_cb(void *handle, void *userdata, mz_zip_file *file_info, const char *path) {
+    MZ_UNUSED(handle);
+    MZ_UNUSED(userdata);
+    MZ_UNUSED(path);
+
+    /* Print the current entry extracting */
+    // printf("Extracting %s\n", file_info->filename);
+    return MZ_OK;
+}
+
+int32_t minizip_extract_progress_cb(void *handle, void *userdata, mz_zip_file *file_info, int64_t position) {
+    minizip_opt *options = (minizip_opt *)userdata;
+    double progress = 0;
+    uint8_t raw = 0;
+
+    MZ_UNUSED(userdata);
+
+    mz_zip_reader_get_raw(handle, &raw);
+
+    if (raw && file_info->compressed_size > 0)
+        progress = ((double)position / file_info->compressed_size) * 100;
+    else if (!raw && file_info->uncompressed_size > 0)
+        progress = ((double)position / file_info->uncompressed_size) * 100;
+
+    /* Print the progress of the current extraction */
+    if (options->verbose)
+        printf("%s - %" PRId64 " / %" PRId64 " (%.02f%%)\n", file_info->filename, position,
+            file_info->uncompressed_size, progress);
+
+    return MZ_OK;
+}
+
+int32_t minizip_extract_overwrite_cb(void *handle, void *userdata, mz_zip_file *file_info, const char *path) {
+    // minizip_opt *options = (minizip_opt *)userdata;
+    MZ_UNUSED(handle);
+    MZ_UNUSED(file_info);
+    return MZ_OK;
+}
+
+int32_t minizip_extract(const char *path, const char *pattern, const char *destination, const char *password, minizip_opt *options) {
+    void *reader = NULL;
+    int32_t err = MZ_OK;
+    int32_t err_close = MZ_OK;
+
+    // printf("Archive %s\n", path);
+
+    /* Create zip reader */
+    mz_zip_reader_create(&reader);
+    mz_zip_reader_set_pattern(reader, pattern, 1);
+    mz_zip_reader_set_password(reader, password);
+    mz_zip_reader_set_encoding(reader, options->encoding);
+    mz_zip_reader_set_entry_cb(reader, options, minizip_extract_entry_cb);
+    mz_zip_reader_set_progress_cb(reader, options, minizip_extract_progress_cb);
+    mz_zip_reader_set_overwrite_cb(reader, options, minizip_extract_overwrite_cb);
+
+    err = mz_zip_reader_open_file(reader, path);
+
+    if (err != MZ_OK) {
+        printf("Error %" PRId32 " opening archive %s\n", err, path);
+    } else {
+        /* Save all entries in archive to destination directory */
+        err = mz_zip_reader_save_all(reader, destination);
+
+        if (err == MZ_END_OF_LIST) {
+            if (pattern != NULL) {
+                printf("Files matching %s not found in archive\n", pattern);
+            } else {
+                printf("No files in archive\n");
+                err = MZ_OK;
+            }
+        } else if (err != MZ_OK) {
+            printf("Error %" PRId32 " saving entries to disk %s\n", err, path);
+        }
+    }
+
+    err_close = mz_zip_reader_close(reader);
+    if (err_close != MZ_OK) {
+        printf("Error %" PRId32 " closing archive for reading\n", err_close);
+        err = err_close;
+    }
+
+    mz_zip_reader_delete(&reader);
+    return err;
+}
+
+/***************************************************************************/
+int32_t minizip_add_entry_cb(void *handle, void *userdata, mz_zip_file *file_info) {
+    MZ_UNUSED(handle);
+    MZ_UNUSED(userdata);
+    MZ_UNUSED(file_info);
+
+    /* Print the current file we are trying to compress */
+    // printf("Adding %s\n", file_info->filename);
+    return MZ_OK;
+}
+
+int32_t minizip_add_progress_cb(void *handle, void *userdata, mz_zip_file *file_info, int64_t position) {
+    minizip_opt *options = (minizip_opt *)userdata;
+    double progress = 0;
+    uint8_t raw = 0;
+
+    MZ_UNUSED(userdata);
+
+    mz_zip_writer_get_raw(handle, &raw);
+
+    if (raw && file_info->compressed_size > 0)
+        progress = ((double)position / file_info->compressed_size) * 100;
+    else if (!raw && file_info->uncompressed_size > 0)
+        progress = ((double)position / file_info->uncompressed_size) * 100;
+
+    /* Print the progress of the current compress operation */
+    if (options->verbose)
+        printf("%s - %" PRId64 " / %" PRId64 " (%.02f%%)\n", file_info->filename, position,
+            file_info->uncompressed_size, progress);
+    return MZ_OK;
+}
+
+int32_t minizip_add_overwrite_cb(void *handle, void *userdata, const char *path) {
+    MZ_UNUSED(handle);
+    MZ_UNUSED(userdata);
+    MZ_UNUSED(path);
+    return MZ_OK;
+}
+
+int32_t minizip_add(const char *path, const char *password, minizip_opt *options, int32_t arg_count, const char **args) {
+    void *writer = NULL;
+    int32_t err = MZ_OK;
+    int32_t err_close = MZ_OK;
+    int32_t i = 0;
+    const char *filename_in_zip = NULL;
+
+
+    printf("Archive %s\n", path);
+
+    /* Create zip writer */
+    mz_zip_writer_create(&writer);
+    mz_zip_writer_set_password(writer, password);
+    mz_zip_writer_set_aes(writer, options->aes);
+    mz_zip_writer_set_compress_method(writer, options->compress_method);
+    mz_zip_writer_set_compress_level(writer, options->compress_level);
+    mz_zip_writer_set_follow_links(writer, options->follow_links);
+    mz_zip_writer_set_store_links(writer, options->store_links);
+    mz_zip_writer_set_overwrite_cb(writer, options, minizip_add_overwrite_cb);
+    mz_zip_writer_set_progress_cb(writer, options, minizip_add_progress_cb);
+    mz_zip_writer_set_entry_cb(writer, options, minizip_add_entry_cb);
+    mz_zip_writer_set_zip_cd(writer, options->zip_cd);
+    if (options->cert_path != NULL)
+        mz_zip_writer_set_certificate(writer, options->cert_path, options->cert_pwd);
+
+    err = mz_zip_writer_open_file(writer, path, options->disk_size, options->append);
+
+    if (err == MZ_OK) {
+        for (i = 0; i < arg_count; i += 1) {
+            filename_in_zip = args[i];
+
+            /* Add file system path to archive */
+            err = mz_zip_writer_add_path(writer, filename_in_zip, NULL, options->include_path, 1);
+            if (err != MZ_OK)
+                printf("Error %" PRId32 " adding path to archive %s\n", err, filename_in_zip);
+        }
+    } else {
+        printf("Error %" PRId32 " opening archive for writing\n", err);
+    }
+
+    err_close = mz_zip_writer_close(writer);
+    if (err_close != MZ_OK) {
+        printf("Error %" PRId32 " closing archive for writing %s\n", err_close, path);
+        err = err_close;
+    }
+
+    mz_zip_writer_delete(&writer);
+    return err;
+}
+
+int zip_extract(const char* path, const char* dest) {
+    minizip_opt options;
+    memset(&options, 0, sizeof(options));
+    options.compress_method = MZ_COMPRESS_METHOD_DEFLATE;
+    return minizip_extract(path, NULL, dest, NULL, &options);
+}
+
+int zip_compress(const char* path, const char* dest, int level) {
+    minizip_opt options;
+    memset(&options, 0, sizeof(options));
+
+    if (level > MZ_COMPRESS_LEVEL_BEST) {
+        level = MZ_COMPRESS_LEVEL_BEST;
+    } else if (level < MZ_COMPRESS_LEVEL_DEFAULT) {
+        level = MZ_COMPRESS_LEVEL_DEFAULT;
+    }
+    options.compress_level = level;
+    options.include_path = 1;
+
+    const char* names[] = {path, };
+    return minizip_add(dest, NULL, &options, 1, names);
+}
diff --git a/libzip.h b/libzip.h
new file mode 100644
index 0000000..7b0b7ac
--- /dev/null
+++ b/libzip.h
@@ -0,0 +1,15 @@
+#ifndef __LIBZIP_H__
+#define __LIBZIP_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+int zip_extract(const char* path, const char* dest);
+int zip_compress(const char* path, const char* dest, int level);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __LIBZIP_H__
\ No newline at end of file
diff --git a/zsign.cpp b/zsign.cpp
index 2698cf9..ef7858d 100644
--- a/zsign.cpp
+++ b/zsign.cpp
@@ -6,6 +6,7 @@
 #include <libgen.h>
 #include <dirent.h>
 #include <getopt.h>
+#include "libzip.h"
 
 const struct option options[] = {
 	{"debug", no_argument, NULL, 'd'},
@@ -204,7 +205,11 @@ int main(int argc, char *argv[])
 		StringFormat(strFolder, "/tmp/zsign_folder_%llu", timer.Reset());
 		ZLog::PrintV(">>> Unzip:\t%s (%s) -> %s ... \n", strPath.c_str(), GetFileSizeString(strPath.c_str()).c_str(), strFolder.c_str());
 		RemoveFolder(strFolder.c_str());
+		/*
 		if (!SystemExec("unzip -qq -d '%s' '%s'", strFolder.c_str(), strPath.c_str()))
+		*/
+		if (zip_extract(strPath.c_str(), strFolder.c_str()) != 0)
+		//*/
 		{
 			RemoveFolder(strFolder.c_str());
 			ZLog::ErrorV(">>> Unzip Failed!\n");
@@ -242,7 +247,12 @@ int main(int argc, char *argv[])
 			{
 				uZipLevel = uZipLevel > 9 ? 9 : uZipLevel;
 				RemoveFile(strOutputFile.c_str());
+
+				/*
 				SystemExec("zip -q -%u -r '%s' Payload", uZipLevel, strOutputFile.c_str());
+				/*/
+				zip_compress("Payload", strOutputFile.c_str(), uZipLevel);
+				//*/
 				chdir(szOldFolder);
 				if (!IsFileExists(strOutputFile.c_str()))
 				{
